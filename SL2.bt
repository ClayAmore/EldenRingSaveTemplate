//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SL2
//   Authors: ClayAmore
//   Version: 
//   Purpose: Reading an Elden Ring Save File
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local enum Boolean {
    False = 0,
    True = 1
};

// Coordinates
typedef struct {
    float X;
    float Y;
    float Z;
} FloatVector3 <read=Str("(%.1f, %.1f, %.1f)", X, Y, Z)>;

// Angle
typedef struct {
    float X;
    float Y;
    float Z;
    float W;
} FloatVector4 <read=Str("(%.1f, %.1f, %.1f, %.1f)", X, Y, Z, W)>;

// MapID
typedef byte M[4] <read=Str("%02d %02d %02d %02d",this[3],this[2],this[1],this[0])>;

// Items 
// Global CS::GaItem starts at (143ce0680 + 0x8)
// Length 0x1400
// Used for lookup of item ids from ga_item_handle maybe
// Ashes of War are first
typedef struct Item {
    int32 GaitemHandle<format=hex>;
    Assert(
        (GaitemHandle & 0xF0000000) == 0 ||
        (GaitemHandle & 0xF0000000) == 0x80000000 ||
        (GaitemHandle & 0xF0000000) == 0x90000000 ||
        (GaitemHandle & 0xF0000000) == 0xC0000000
    );
    int32 ItemID<format=hex>;
    Assert(
        (ItemID == 0xFFFFFFFF) ||
        (ItemID & 0xF0000000) == 0 ||
        (ItemID & 0xF0000000) == 0x10000000 ||
        (ItemID & 0xF0000000) == 0x80000000
    );
    // Additional data for type = Weapon
    if ((GaitemHandle != 0) && ((GaitemHandle & 0xf0000000) == 0x80000000)) { 
        int32 unk0x10; 
        int32 unk0x14;
        uint32 AOWGaitemHandle<format=hex>;
        Assert(
            AOWGaitemHandle == 0 ||
            (AOWGaitemHandle & 0xF0000000) == 0xC0000000
        );
        byte unk0x1c; Assert(unk0x1c == 0);
    }
    // Additional data for type = Armor
    else if((GaitemHandle != 0) && ((GaitemHandle & 0xf0000000) == 0x90000000)) { 
        int32 unk0x10; 
        int32 unk0x14;
    }
};

// Player Game Data
// CS::PlayerGameData+0x8
// Length 0x1B0
typedef struct {
    uint32 unk0x0 <hidden = true>;
    uint32 unk0x4 <hidden = true>;
    uint32 Health;
    uint32 MaxHealth;
    uint32 BaseMaxHealth;
    uint32 FP;
    uint32 MaxFP;
    uint32 BaseMaxFP;
    uint32 unk0x20 <hidden = true>;
    uint32 SP;
    uint32 MaxSP;
    uint32 BaseMaxSP;
    uint32 unk0x30 <hidden = true>;
    uint32 Vigor;
    uint32 Mind;
    uint32 Endurance;
    uint32 Strength;
    uint32 Dexterity;
    uint32 Intelligence;
    uint32 Faith;
    uint32 Arcane;
    uint32 Humanity;
    uint32 unk0x58 <hidden = true>;
    uint32 unk0x5C <hidden = true>;
    uint32 Level;
    uint32 Souls;
    uint32 Soulmemory;
    uint32 unk0x6c <hidden = true>;
    uint32 PoisonBuildUp;
    uint32 RotBuildUp;
    uint32 BleedBuildUp;
    uint32 FrostBuildUp;
    uint32 DeathBuildUp;
    uint32 SleepBuildUp;
    uint32 MadnessBuildUp;
    uint32 unk0x8c ;
    uint32 CharacterType;
    wchar_t  CharacterName[0x10];
    uint16 CharacterNameTerminator <hidden = true>; Assert(CharacterNameTerminator == 0);
    byte Gender;
    byte ArcheType;
    byte unk0xb8 ;
    byte unk0xb9 ;
    byte VoiceType;
    byte Gift;
    byte unk0xbc ;
    byte unk0xbd ;
    byte AdditionalTalismanSlotsCount;
    byte SummonSpiritLevel;
    byte unk0xbf[0x18] ;
    byte FurlCallingFingerOn;
    byte unk0xd9 ;
    byte MatchmakingWeaponLvl;
    byte WhiteCipherRingOn;
    byte BlueCipherRingOn;
    byte unk0xdd[0x1A] ;
    byte GreatRuneOn;
    byte unk0xf8 ;
    byte MaxCrimsonFlaskCount;
    byte MaxCeruleanFlaskCount;
    byte unk0xfb[0x15] ; 
    wchar_t Password[0x8];
    uint16 PasswordTerminator <hidden = true>; Assert(PasswordTerminator == 0);
    wchar_t GroupPassword1[0x8];
    uint16 GroupPassword1Terminator <hidden = true>; Assert(GroupPassword1Terminator == 0);
    wchar_t GroupPassword2[0x8];
    uint16 GroupPassword2Terminator <hidden = true>; Assert(GroupPassword2Terminator == 0);
    wchar_t GroupPassword3[0x8];
    uint16 GroupPassword3Terminator <hidden = true>; Assert(GroupPassword3Terminator == 0);
    wchar_t GroupPassword4[0x8];
    uint16 GroupPassword4Terminator <hidden = true>; Assert(GroupPassword4Terminator == 0);
    wchar_t GroupPassword5[0x8];
    uint16 GroupPassword5Terminator <hidden = true>; Assert(GroupPassword5Terminator == 0);
    byte unk0x17c[0x34];
} PlayerGameData;

// Player Game Data
// CS::PlayerGameData+0x1B8
// Length 0xD0
typedef struct {
    uint32 SPEffectID;
    float RemainingTime;
    uint32 unk0x8;
    uint32 unk0x10;
} SPEffects;


// Equip Game Data
// CS::EquipGameData+0x8
// Length 0x58
typedef struct {
    uint32 LeftHandArmament1;
    uint32 RightHandArmament1;
    uint32 LeftHandArmament2;
    uint32 RightHandArmament2;
    uint32 LeftHandArmament3;
    uint32 RightHandArmament3;
    uint32 Arrows1;
    uint32 Bolts1;
    uint32 Arrows2;
    uint32 Bolts2;
    uint32 unk0x28 <hidden = true>;
    uint32 unk0x2c <hidden = true>;
    uint32 Head;
    uint32 Chest;
    uint32 Arms;
    uint32 Legs;
    uint32 unk0x40 <hidden = true>;
    uint32 Talisman1;
    uint32 Talisman2;
    uint32 Talisman3;
    uint32 Talisman4;
    uint32 Talisman5 <hidden = true>;
} ChrAsmEquipment;


// ChrAsm
// ChrAsm + 0x4
// Length 0x1C
typedef struct {
    uint32 ArmStyle;
    uint32 LeftHandWeaponActiveSlot;
    uint32 RightHandWeaponActiveSlot;
    uint32 LeftArrowActiveSlot;
    uint32 RightArrowActiveSlot;
    uint32 LeftBoltActiveSlot;
    uint32 RightBoltActiveSlot;   
} ArmStyleAndActiveWeaponSlots;


// Equip Inventory Data
// One for held inventory and one for storage box
// CS::EquipInventoryData+0x8
// Length 
typedef struct {
    uint32 GaitemHandle <format=hex>;
    uint32 Quantity;
    uint32 InventoryIndex;
} EquipInventoryDataEntry;

typedef struct (int commonItemsCapacity, int keyItemsCapacity) {
    uint32 CommonItemsCount;
    EquipInventoryDataEntry CommonItems[commonItemsCapacity] <read=Str("[%X, %d]", this.GaitemHandle, this.Quantity)>;
    uint32 KeyItemsCount;
    EquipInventoryDataEntry KeyItems[keyItemsCapacity] <read=Str("[%X, %d]", this.GaitemHandle, this.Quantity)>;;
    uint32 EquipIndexCounter;
    uint32 AcquistionIndexCounter;
} Inventory;


// Equip Magic Data
// EquipMagicData+0x10
typedef struct {
    int32 SpellID;
    int32 unk0x4;
} SpellSlot;
typedef struct {
    // Max is 14. 
    SpellSlot SpellSlots[0xE] <read=Str("%d", this.SpellID)>;
    int32 ActiveIndex;
} EquipMagicData;


// Equip Item Data
// CS::EquipItemData+8
typedef struct {
    uint32 GaitemHandle <format=hex>;
    int32 EquipmentIndex;
} EquippedItem;
typedef struct {
    EquippedItem EquippedItems[0xA];
    uint32 ActiveSlot;
    EquippedItem PouchItems[0x6];
    uint32 unk0x0 <hidden = true>;
    uint32 unk0x0 <hidden = true>;
} EquipItemData;


// Gesture Equip Data
// CS::GestureEquipData+8 (7FF4A029D040+0x8)
// Length 0x70
typedef struct {
    uint32 EquippedGesture[0x6] <format = hex>;
} GestureEquipData ;


// Projectile Equip Data
// No class name (7FF49F546020)
// Length ProjectCount*0x8
typedef struct {
    int32 ItemID; // Can be found in the EquipParamWeapon.
    int32 unk0x4 <hidden = true>;
} Projectile;
typedef struct {
    uint32 ProjectileCount;
    Projectile Projectiles[ProjectileCount] <read=Str("%d", this.ItemID)>; 

} EquipProjectileData ;

// Another Equip Data list?
// Length 0x27*4
typedef struct {
    int32 LeftHandArmament1 <format=hex>;
    int32 RightHandArmament1 <format=hex>;
    int32 LeftHandArmament2 <format=hex>;
    int32 RightHandArmament2 <format=hex>;
    int32 LeftHandArmament3 <format=hex>;
    int32 RightHandArmament3 <format=hex>;
    int32 Arrows1 <format=hex>;
    int32 Bolts1 <format=hex>;
    int32 Arrows2 <format=hex>;
    int32 Bolts2 <format=hex>;
    int32 unk0x28 <format=hex, hidden = true >;
    int32 unk0x2c <format=hex, hidden = true>;
    int32 Head <format=hex>;
    int32 Chest <format=hex>;
    int32 Arms <format=hex>;
    int32 Legs <format=hex>;
    int32 unk0x40 <format=hex, hidden = true>;
    int32 Talisman1 <format=hex>;
    int32 Talisman2 <format=hex>;
    int32 Talisman3 <format=hex>;
    int32 Talisman4 <format=hex>;
    int32 unk0x54 <format=hex, hidden = true>; 
    int32 QuickItem1 <format=hex>;
    int32 QuickItem2 <format=hex>;
    int32 QuickItem3 <format=hex>;
    int32 QuickItem4 <format=hex>;
    int32 QuickItem5 <format=hex>;
    int32 QuickItem6 <format=hex>;
    int32 QuickItem7 <format=hex>;
    int32 QuickItem8 <format=hex>;
    int32 QuickItem9 <format=hex>;
    int32 QuickItem10 <format=hex>;
    int32 Pouch1 <format=hex>;
    int32 Pouch2 <format=hex>;
    int32 Pouch3 <format=hex>;
    int32 Pouch4 <format=hex>;
    int32 Pouch5 <format=hex>;
    int32 Pouch6 <format=hex>;
    int32 unk0x98 <format=hex, hidden = true>;
} EquippedArmamentsAndItems <size=(0x27*0x4)>;

// Equipped Physic
// No class name (7FF49FC3AD44)
// Length 0xC
typedef struct {
    int32 Slot1;
    int32 Slot2;
    int32 unk0x8;
} PhysicEquipData <size=0xC>;

// Face Data
// CS::FaceData
// Length 0x12F
typedef struct (byte isInProfileSummary) {
    int32 FaceData0x150 <hidden = true>; Assert(FaceData0x150 == -1 || FaceData0x150 == 0);
    
    char Magic[4];
    Assert(Magic == "FACE" || Magic == "");
    uint32 Alignment;
    uint32 Size <format = hex>;
    
    ubyte FaceModel;
    ubyte Padding[3] <hidden = true>;
    
    ubyte HairModel;
    ubyte Padding1[3] <hidden = true>;
    
    ubyte unk0x14 < hidden = true>;
    ubyte Padding2[3] <hidden = true>;
    
    ubyte EyeBrowModel;
    ubyte Padding3[3] <hidden = true>;
    
    ubyte BeardModel;
    ubyte Padding4[3] <hidden = true>;
    
    ubyte EyePatchModel;
    ubyte Padding5[3] <hidden = true>;
    
    ubyte unk0x24;
    ubyte Padding6[3] <hidden = true>;
    
    ubyte unk0x28;
    ubyte Padding7[3] <hidden = true>;
    
    ubyte ApparentAge;
    ubyte FacialAesthetic;
    ubyte FormEmphasis;
    ubyte unk0xf;
    ubyte BrowRidgeHeight;
    ubyte InnerBrowRidge;
    ubyte OuterBrowRidge;
    ubyte CheekboneHeight;
    ubyte CheekboneDepth;
    ubyte CheekboneWidth;
    ubyte CheekboneProstrution;
    ubyte Cheeks;
    ubyte ChinTipPosition;
    ubyte ChinLength;
    ubyte ChinProstrusion;
    ubyte ChinDepth;
    ubyte ChinSize;
    ubyte ChinHeight;
    ubyte ChinWidth;
    ubyte EyePosition;
    ubyte EyeSize;
    ubyte EyeSlant;
    ubyte EyeSpacing;
    ubyte NoseSize;
    ubyte NoseForeheadRatio;
    
    ubyte unk0x45;
    
    ubyte FaceProtrusion;
    ubyte VerticalFaceRatio;
    ubyte FacialFeatureSlant;
    ubyte HorizontalFaceRatio;
    
    ubyte unk0x4a;
    
    ubyte ForeheadDepth;
    ubyte ForeheadProtrusion;
    
    ubyte unk0x4d;
    
    ubyte JawProstrusion;
    ubyte JawWidth;
    ubyte LowerJaw;
    ubyte JawContour;
    ubyte LipShape;
    ubyte LipSize;
    ubyte LipFullness;
    ubyte MouthExpression;
    ubyte LipProstrusion;
    ubyte LipThickness;
    ubyte MouthProstrusion;
    ubyte MouthSlant;
    ubyte Occulsion;
    ubyte MouthPosition;
    ubyte MouthWidth;
    ubyte MouthChinDistance;
    ubyte NoseRidgeDepth;
    ubyte NoseRidgeLength;
    ubyte NosePosition;
    ubyte NoseTipHeight;
    ubyte NostrilSlant;
    ubyte NostrilSize;
    ubyte NostrilWidth;
    ubyte NoseProstrution;
    ubyte NoseBridgeHeight;
    ubyte BridgeProtrusion1;
    ubyte BridgeProtrusion2;
    ubyte NoseBridgeWidth;
    ubyte NoseHeight;
    ubyte NoseSlant;
    
    ubyte unk0x6c[64];
    
    ubyte HeadSize;
    ubyte ChestSize;
    ubyte AbdomenSize;
    ubyte ArmsSize;
    ubyte LegsSize;
    
    ubyte unk0xb1[2];
    
    ubyte SkinColorR;
    ubyte SkinColorG;
    ubyte SkinColorB;
    ubyte SkinLuster;
    ubyte Pores;
    ubyte Stubble;
    ubyte DarkCircles;
    ubyte DarkCircleColorR;
    ubyte DarkCircleColorG;
    ubyte DarkCircleColorB;
    ubyte CheeksColorIntensity;
    ubyte CheekColorR;
    ubyte CheekColorG;
    ubyte CheekColorB;
    ubyte EyeLiner;
    ubyte EyeLinerColorR;
    ubyte EyeLinerColorG;
    ubyte EyeLinerColorB;
    ubyte EyeShadowLower;
    ubyte EyeShadowLowerColorR;
    ubyte EyeShadowLowerColorG;
    ubyte EyeShadowLowerColorB;
    ubyte EyeShadowUpper;
    ubyte EyeShadowUpperColorR;
    ubyte EyeShadowUpperColorG;
    ubyte EyeShadowUpperColorB;
    ubyte LipStick;
    ubyte LipStickColorR;
    ubyte LipStickColorG;
    ubyte LipStickColorB;
    ubyte TattoMarkPositionHorizontal;
    ubyte TattoMarkPositionVertical;
    ubyte TattoMarkAngle;
    ubyte TattoMarkExpansion;
    ubyte TattoMarkColorR;
    ubyte TattoMarkColorG;
    ubyte TattoMarkColorB;
    
    ubyte unk0xd8;
    
    ubyte TattoMarkFlip;
    ubyte BodyHair;
    ubyte BodyHairColorR;
    ubyte BodyHairColorG;
    ubyte BodyHairColorB;
    ubyte RighIrisColorR;
    ubyte RighIrisColorG;
    ubyte RighIrisColorB;
    ubyte RightIrisSize;
    ubyte RightEyeClouding;
    ubyte RightEyeCloudingColorR;
    ubyte RightEyeCloudingColorG;
    ubyte RightEyeCloudingColorB;
    ubyte RightEyeWhiteColorR;
    ubyte RightEyeWhiteColorG;
    ubyte RightEyeWhiteColorB;
    ubyte RightEyePosition;
    ubyte LeftIrisColorR;
    ubyte LeftIrisColorG;
    ubyte LeftIrisColorB;
    ubyte LeftIrisSize;
    ubyte LeftEyeClouding;
    ubyte LeftEyeCloudingColorR;
    ubyte LeftEyeCloudingColorG;
    ubyte LeftEyeCloudingColorB;
    ubyte LeftEyeWhiteColorR;
    ubyte LeftEyeWhiteColorG;
    ubyte LeftEyeWhiteColorB;
    ubyte LeftEyePosition;
    ubyte HairColorR;
    ubyte HairColorG;
    ubyte HariColorB;
    ubyte Luster;
    ubyte HairRootDarkness;
    ubyte WhiteHairs;
    ubyte BeardColorR;
    ubyte BeardColorG;
    ubyte BeardColorB;
    ubyte BeardLuster;
    ubyte HairRootDarkness;
    ubyte BeardWhiteHairs;
    ubyte BrowColorR;
    ubyte BrowColorG;
    ubyte BrowColorB;
    ubyte BrowLuster;
    ubyte BrowRootDarkness;
    ubyte BrowWhiteHairs;
    ubyte EyeLeashColorR;
    ubyte EyeLeashColorG;
    ubyte EyeLeashColorB;
    ubyte EyePatchColorR;
    ubyte EyePatchColorG;
    ubyte EyePatchColorB;
    ubyte unk0x10e [0x12];
    
    if (isInProfileSummary == 0) {
        byte face_data_0x128_not_eq_0x0; 
        int16 face_data_0x128;
        int64 face_data_0x12a;
    }
} FaceData;

// Gesture Game Data
// CS::GestureGameData (7FF49E380440)
// Length 0x100
typedef struct {
    int32 GestureID[0x40];
} GestureGameData;

// Regions
// No class name (7FF49FC3AFE8)
// Length: Length defined in the struct
typedef struct {
    uint32 RegionsCount;
    if (RegionsCount > 0) {
        uint32 RegionsIds[RegionsCount];
    }
} Regions;

// Ride Game Data
// CS::RideGameData (7FF4A05AC380)
// Length 0x28
local enum HorseState { Active = 13, InActive = 1, Dead = 3};
typedef struct {
    FloatVector3 Coordinates;
    M MapId;
    FloatVector4 Angle;
    int32 HP;
    HorseState State;
} RideGameData <size=0x28>;

typedef struct {
    FloatVector3 Coordinates;
    FloatVector4 Angle;
    uint32 unk0x1C <hidden = true>;
    uint32 unk0x20 <hidden = true>;
    uint32 unk0x24 <hidden = true>;
    uint32 unk0x28 <hidden = true>;
    uint32 unk0x2C <hidden = true>;
    int unk0x30  <hidden = true>;
    int Souls;
    M MapID;
    uint32 unk0x3C <hidden = true>;
    uint32 unk0x38 <hidden = true>; // Some sort of smaller map identifier.
} BloodStainData;

// Menu Profile Save Load
// CS::MenuProfileSaveLoad
// const CS::CSMenuSimpleSaveDataChunk<1,struct CS::MENU_WORLD_MAP_SAVEDATA,2>
// Length 0x1008
typedef struct {
    uint16 unk0x0 <hidden = true>;
    uint16 unk0x2 <hidden = true>;
    uint32 Size;
    byte Data[Size];
} MenuProfileSaveLoad <size=0x1008>;


// Trophy Equip Data
// CS::TrophyEquipData
// Length 0x34
typedef struct {
    int32 unk0x0;
    byte unk0x4[0x10];
    byte unk0x14[0x10];
    byte unk0x24[0x10];
} TrophyEquipData;


// Gaitem Game Data
// CS::GaitemGameData
// Length ((0x1B58*0x10)+0x8)
typedef struct  {
    uint32 id <read = Str("%d", this & 0x0fffffff)>;
    byte unk0x4 <hidden = true>;
    byte padding[3] <hidden = true>;
    uint32 NextItemId  <read = Str("%d", this & 0x0fffffff)>;
    byte unk0xc <hidden = true>;
    byte pading[3] <hidden = true>;
} GaitemGameDataEntry <read=Str("%d", id & 0x0fffffff)>;
typedef struct {
    int64 Count;
    GaitemGameDataEntry item[0x1B58];
} GaitemGameData;


typedef struct(int TotalSize) {
    uint32 Count;
    uint32 ID[TotalSize];
} CSTutorialDataChunk;
// Tutorial Data
// CS::CSTutorialData
// const CS::CSMenuSimpleSaveDataChunk<1,struct CS::MENU_WORLD_MAP_SAVEDATA,2>
// Length 0x408
typedef struct {
    uint16 unk0x0 <hidden = true>;
    uint16 unk0x2 <hidden = true>;
    uint32 Size;
    CSTutorialDataChunk Data(Size);
} CSTutorialData <size = (1024 + 8)>;


// EventFlag
// CS::CSFDVirtualMemoryFlag (7FF4A0300000)
// Length 0x1BF99F
typedef struct {
    byte Bit0: 1;
    byte Bit1: 1;
    byte Bit2: 1;
    byte Bit3: 1;
    byte Bit4: 1;
    byte Bit5: 1;
    byte Bit6: 1;
    byte Bit7: 1;
} EventFlag;


typedef struct {
    int32 Size;
    if (Size > 0) {
        uint32 Data[Size/4];
    }
} CSFieldArea;

typedef struct (int &pSize) {
    char magic[4];
    M MapId;
    uint32 Size;
    uint32 unk0xC <format = hex>;
    
    local int Size2 = Size - 0x10;
    if (Size2 > 0 ) {
        byte unk0x8 [Size2];
        pSize = pSize - Size;
    }
    else {
        pSize = pSize - 0x10;
    }
} CSWorldBlockChrData <optimize = false>;
// TODO: Check if it changes during online session.
typedef struct (int32 Size) {
    char Magic[4];
    
    // Appears to be hardcoded to `0x21042700`. 
    uint32 unk_0x21042700 <hidden = true>;
    Assert(unk_0x21042700 == 0x21042700 || unk_0x21042700 == 0);
    
    uint32 unk0x8 <hidden = true>;
    Assert(unk0x8 == 0);
    
    uint32 unk0xc <hidden = true>;
    Assert(unk0xc == 0);
    
    if (Size != 0) {
        Size = Size - 0x10;
        while (Size != 0) {
            CSWorldBlockChrData WorldBlockChrData(Size);
        }
    }
} CSWorldAreaChrData;
typedef struct {
    int32 Size;
    if ( Size > 0 ) {
        CSWorldAreaChrData WorldAreaChrData (Size);
    }
} CSWorldArea;


typedef struct (byte &done){
    M MapID;
    int32 Size;
    uint64 unk0x8;
    done = Size == 0;
    if (Size > 0) {
        byte Data[Size-0x10];
    }
} EntryData <optimize = false>;
typedef struct{
    char magic[4];
    uint32 unk0x4 <format = hex>;
    local byte done = false;
    while (!done) {
        EntryData Entry(done);
    }
} CSSomething;
typedef struct {
    int32 Size;
    CSSomething Data;
} CSWorldGeomMan;


typedef struct (int Size) {
    byte Data[Size];
} CSStageManEntry <optimize = false>;
typedef struct (int &Size) {
    int Count;
    CSStageManEntry Entry((Size-4)/Count)[Count];
} CSStageMan;
typedef struct {
    int32 Size;
    if (Size > 0) {
        CSStageMan Data(Size);
    }
} CSRendMan;


// PlayerCoords
// Length 0x3D
typedef struct {
    FloatVector3 Coordinates;
    M MapID;
    FloatVector4 Angle;
    byte game_man_0xBF0 <hidden = true>;
    Assert(game_man_0xBF0 == 0 || game_man_0xBF0 == 1);
    FloatVector3 UnkCoordinates;
    FloatVector4 UnkAngle;
} CSPlayerCoords;

// CSNetMan
// CS::CSNetMan ()
// Length 0x20004
typedef struct {
    uint32 unk0x0 <hidden = true>;
    Assert(unk0x0 == 2 || unk0x0 == 0);
    byte CSNetManData[0x20000];
} CSNetMan<size=0x20004>;

local enum <uint16> WeatherTypeEnum {
    None2 = -1,
    Default = 0,
    Rain = 20,
    Snow = 40,
    WindyRain = 30,
    Fog = 50,
    Cloudless = 1,
    FlatClouds = 10,
    PuffyClouds = 11,
    RainyCloud = 21,
    WindyFog = 31,
    HeavySnow = 41,
    HeavyFog = 51,
    WindyPuffyClouds = 60,
    RainyHeavyFog = 52,
    SnowyHeavyFog = 81,
    ScatteredRain = 82,
    Unknown18 = 83,
    Unknown19 = 84,
    Unknown20 = 85,
    Unknown21 = 86,
    Unknown22 = 87,
    Unknown23 = 88,
};
// WorldAreaWeather
// CS::WorldAreaWeather 
// Length 0xC
typedef struct {
    uint16 AreaId;
    WeatherTypeEnum WeatherType;
    // Maybe a timer?
    uint32 Timer;
    uint32 padding <hidden = true>;
} CSWorldAreaWeather;

// WorldAreaTime
// CS::WorldAreaTime
// Length 0xC
typedef struct {
    uint32 Hour;
    uint32 Minute;
    uint32 Seconds;
} CSWorldAreaTime <read=Str("%02d:%02d:%02d", Hour, Minute, Seconds)>;

typedef struct {
    int BaseVersionCopy;
    int BaseVersion;
    Boolean BaseVersionIsLatest;
    Assert( BaseVersionIsLatest == True || BaseVersionIsLatest == False);
    int unk0xc <hidden = true>;
} BaseVersion;

typedef struct {
    ubyte Data[0x20];
} CSPS5Activity;

typedef struct {
    uint64 unk0x0;
    uint64 unk0x8;
    uint64 unk0x10;
    uint64 unk0x18;
    uint64 unk0x20;
    uint64 unk0x28;
    uint16 unk0x30;
} CSDlc;

typedef struct (
    PlayerGameData &player, 
    ChrAsmEquipment &equipment,
    EquippedArmamentsAndItems &equippedArmamentsAndItems,
    EquipMagicData &equippedSpells
    ) {
    // Level
    uint32 Level <format = hex>;
    Assert(Level == 0 || Level == ValueHash(player.Level));
    
    // Stats
    uint Stats <format = hex>;
    Assert(Stats == 0 || Stats == StatsHash(player));
    
    // ArcheType
    uint ArcheType <format = hex>;
    Assert(ArcheType == 0 || ArcheType == ValueHash(player.ArcheType));
    
    // PlayerGameData0xC0
    uint PlayerGameData0xC0 <format = hex>;
    local byte buffer[4];
    ConvertDataToBytes(player.unk0xb8, buffer);
    Assert(PlayerGameData0xC0 == 0 || PlayerGameData0xC0 == BytesHash(buffer, 1));
    
    uint32 padding <hidden = true>;
    
    // Souls
    uint Souls <format = hex>;
    Assert(Souls == 0 || Souls == ValueHash(player.Souls));
    
    // SoulsMemory
    uint Soulmemory <format = hex>;
    Assert(Soulmemory == 0 || Soulmemory == ValueHash(player.Soulmemory));
    
    // Equipped Weapons
    uint EquippedWeapons <format = hex>;
    Assert(EquippedWeapons == 0 || EquippedWeapons == EquippedWeaponsHash(equipment));
    
    // Equipped Armors and Talismans
    uint EquippedArmorsAndTalismans <format = hex>;
    Assert(EquippedArmorsAndTalismans == 0 || EquippedArmorsAndTalismans == EquippedArmorsAndTalismansHash(equipment));

    // Equipped Items
    uint EquippedItems <format = hex>;
    Assert(EquippedItems == 0 || EquippedItems == EquippedItemsHash(equippedArmamentsAndItems));

    // Equipped Spells
    uint EquippedSpells <format = hex>;
    Assert(EquippedSpells == 0 || EquippedSpells == EquippedSpellsHash(equippedSpells));
} CSPlayerGameDataHash <size = 0x80>;

typedef struct {
    byte CameraSpeed;
    byte ControllerVibration;
    byte Brightness;
    byte Unk0x3;
    byte MusicVolume;
    byte SoundEffectsVolume;
    byte VoiceVolume;
    byte DisplayBlood;
    byte Subtitles;
    byte HUD;
    byte CameraXAxis;
    byte CameraYAxis;
    byte ToggleAutoLockOn;
    byte CameraAutoWallRecovery;
    byte Unk0xE;
    byte Unk0xF;
    byte ResetCameraYAxis;
    byte CinematicEffects;
    byte Unk0x12;
    byte PerformMatchmaking;
    byte Unk0x14;
    byte Unk0x15;
    byte ManualAttackAim;
    byte AutoTarget;
    byte LaunchSettings;
    byte SendSummonSign;
    byte Unk0x1A;
    byte HDR;
    byte HDRAdjustBrightness;
    byte HDRMaximumBrightness;
    byte HDRAdjustSaturation;
    byte Unk0x1F;
    byte MasterVolume;
    byte IsRayTracingOn;
    byte MarkNewItems;
    byte ShowRecentTabs;
    uint64 Unk0x24 <hidden = true>; Assert(Unk0x24 == 0);
    uint16 Unk0x2C <hidden = true>; Assert(Unk0x2C == 0);
    byte ShowTutorials;
    byte CameraAutoRotation;
    byte JustZero[0x110] <hidden = true>;
} CSSettings;

// CSMenuSystemSaveLoad
typedef struct {
    uint16 Unk0x0 <hidden = true>;
    uint16 Unk0x2 <hidden = true>;
    uint32 Size;
    ubyte Data[Size];
} CSMenuSystemSaveLoad ;

typedef byte SlotState[10] <read=Str(
    "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d", 
    this[0],this[1],this[2],this[3],
    this[4],this[5],this[6],this[7],
    this[8],this[9]
)>;

typedef struct {
    // Most likely vtable pointer
    uint32 unk0x0 <hidden = true>;
    uint32 unk0x4 <hidden = true>;
    
    ArmStyleAndActiveWeaponSlots ActiveEquippedWeaponsSlots;
    DisplayFormatHex();
    ChrAsmEquipment EquippedItemsGaitemHandles;
    DisplayFormatDecimal();
    ChrAsmEquipment EquippedItemsItemIds;
    int32 Unk0xD4 <hidden = true>; 
    uint32 Unk0xD8 <hidden = true>;
    uint32 Unk0xDC[3] <hidden = true>;
    
} ProfileSummaryChrAsm;

typedef struct {
    wchar_t CharacterName[0x10];
    uint16 CharacterNameTerminator <hidden = true>;
    int32 Level;
    int32 SecondsPlayed;
    int32 RuneMemory;
    M MapId;
    uint32 Unk0x34;
    FaceData Facedata(1);
    ProfileSummaryChrAsm Equipment <format=hex>;
    byte Gender;
    byte ArcheType;
    byte StartingGift;
    byte ProfileSummaryCharacter0x293;
    byte ProfileSummaryCharacter0x294;
    byte ProfileSummaryCharacter0x295;
    int32 ProfileSummaryCharacter0x298;
} ProfileData <optimize = false>;
// CSProfileSummary
typedef struct {
    SlotState IsProfileActive;
    ProfileData Profile[0xA];
} CSProfileSummary;

// PCOptionsData
// CS::PCOptionsData (7FF49E1830C0)
// Length ??
typedef struct {
    uint32 Unk0x0;
    ubyte Unk0xC;
    ubyte Unk0xD;
    ubyte Unk0xE;
    ubyte Unk0xF;
    uint64 Unk0x10;
    uint16 Unk0x18;
    uint16 Unk0x12[0xa0/2];
} CSPCOptionData;

// CSKeyConfigSaveLoad
// CS::CSKeyConfigSaveLoad (7FF49E1830C0)
// Length ??
typedef struct {
    uint16 unk0x0 <hidden = true>;
    uint16 unk0x2 <hidden = true>;
    uint32 Size;
    byte Data[Size];
} CSKeyConfigSaveLoad;

struct BND4FileHeader {
    char magic[0x4];
    byte unk[0x5];
    byte big_endian;
    byte unk;
    byte unk;
    uint file_count;
} Header <size=0x300>;

// Character Slot
struct Slot {
    // Checksum
    byte checksum[0x10];
    
    // Game Version
    uint32 Version;
    
    // MapID
    M MapID;
    
    // Random bytes? Game called random generator on this I think :thinkus:
    byte unk0x8[0x18]<hidden=true>;
    
    // GaitemMap count. It's two entries shorter on older patches.
    local int count = 0x1400;
    if ( Version <= 80 ) {
        count = 0x13FE; 
    }
    
    // Gaitem Map
    Item GaitemHandleMap[count] <optimize=false, read=Str("%X -> %X", this.GaitemHandle, this.ItemID)>;
    
    // Player Data
    PlayerGameData Player;
    SPEffects SpEffects[0xd] <read=Str("%d", this.SPEffectID)>;
    
    // Equipment and Inventory Data
    ChrAsmEquipment EquippedItemsEquipIndex;
    ArmStyleAndActiveWeaponSlots ActiveEquippedWeaponSlots;
    ChrAsmEquipment EquippedItemsItemIds;
    DisplayFormatHex();
    ChrAsmEquipment EquippedItemsGaitemHandles;
    DisplayFormatDecimal();
    Inventory InventoryHeld(0xA80, 0x180);
    EquipMagicData EquippedSpells;
    EquipItemData EquippedItems;
    GestureEquipData EquippedGestures;
    EquipProjectileData AcquiredProjectiles;
    EquippedArmamentsAndItems EquippedArmamentsandItems;
    PhysicEquipData EquippedPhysics;
    
    // Face Data
    FaceData Facedata(0);
    
    // Inventory Data (Storage Box)
    Inventory InventoryStorageBox(0x780, 0x80);
    
    // Gestures
    GestureGameData Gestures;
    
    // Regions
    Regions UnlockedRegions;
    
    // Horse
    RideGameData Horse;
    
    // Control Byte
    byte one <hidden=true>;
    Assert(one == 1 || one == 0);
    
    // Bloodstain
    BloodStainData BloodStain;
    
    uint32 unk_gameDataMan_0x120_or_gameDataMan_0x130 <hidden = true>;
    uint32 unk_gameDataMan_0x88 <hidden = true>;
    
    // MenuProfileSaveLoad
    MenuProfileSaveLoad UnkMenuProfileSaveLoad;
    
    // TrophyEquipData
    TrophyEquipData UnkTrophyEquipData <hidden = true>;
    
    // GaitemGameData
    GaitemGameData GaitemData;
    
    // TutorialData
    CSTutorialData TutorialData;
    
    // Some kind of indicator, stops the game from saving if set to 1
    byte GlobalGameMan_0x8c <hidden = true>;
    
    // TODO: Figure these
    byte GlobalGameMan_0x8d <hidden = true>;
    byte GlobalGameMan_0x8e <hidden = true>;
    
    // Total times player dies since character was first created
    uint32 TotalDeathsCount;
    
    // Character Type
    local enum CT { None = -1, Phantom = 1,  Invader = 2, Ghost = 3, DeadGhost = 10, NakedGhost = 11, Unkown = 13, NakedGhost2 = 14, Invader2 = 15, Invader3 = 16, Blue = 17, Invader4 = 18 };
    CT ChracterType;
    
    // Setting to 1 means can't warp, rest in sites of graces, etc...
    byte InOnlineSessionFlag;
    
    // For phantom or invader character types this value is 0. Otherwise it's 8.
    uint32 OnlineCharacterTypeFlag;
    Assert(OnlineCharacterTypeFlag == 0 || OnlineCharacterTypeFlag == 8);
    
    // Last Grace Rested (-1000)
    uint32 LastRestedGrace;
    
    // Not Alone Flag
    byte NotAloneFlag;
    
    // 1 = 10 seconds. 
    uint32 InGameTimer;
    
    uint32 unk_gameDataMan_0x124_or_gameDataMan_0x134 <hidden = true>;
    
    // EventFlags
    EventFlag EventFlags[0x1BF99F] <name = Str("Offset"), read=Str("%d,%d,%d,%d,%d,%d,%d,%d", Bit0, Bit1, Bit2, Bit3, Bit4, Bit5, Bit6, Bit7)>; 
    byte EventFlagTerminator <hidden = true>;
    Assert(EventFlagTerminator == 0);
    
    // Sized Data?
    CSFieldArea FieldArea; 
    CSWorldArea WorldArea;
    CSWorldGeomMan WorldGeom;
    CSWorldGeomMan WorldGeom2;
    CSRendMan RendMan;
    
    // Player Coordinates
    CSPlayerCoords PlayerCoordinates;
    
    // So far testing shows that setting this to 1 makes you spawn in with animation, 0 means not
    byte GameMan_0xB5E <hidden = true>;
    
    // So far testing shows this gets set to 1 when you map warp, but is set to 0 after you rest at grace
    byte GameMan_0xB5F <hidden = true>;
    
    // SpawnPointEntityId
    uint32 SpawnPointEntityId;
    
    // It's with a heavy heart that I have make an ass out of you and me and assert this as zero without being sure.
    uint32 GameMan0xb64 <hidden = true>;
    Assert(GameMan0xb64 == 0);
    
    // Only saved on versions post patch 65. Temporarily holds SpawnEntityId - 970.
    if (Version > 65) {
        uint32 TempSpawnPointEntityId;
    }
    
     // Only saved on versions post patch 66. Temporarily `1` during loading screen.
    if (Version > 66) {
        byte GameMan0xCB3 <hidden = true>;
    }
    
    // Todo: Detail this
    CSNetMan NetMan;
    
    // World Area Weather
    CSWorldAreaWeather WorldAreaWeather;
    CSWorldAreaTime WorldAreaTime;
    
    // Version from when the character was created.
    BaseVersion BaseCharacterVersion;
    
    // SteamId
    uint64 SteamId;
    
    // PS5Activity
    CSPS5Activity PS5Activity;
    
    // DLC
    CSDlc DLC;
    
    // Hash values calculated from the PlayerGameData
    CSPlayerGameDataHash PlayerGameDataHash (
        Player, 
        EquippedItemsItemIds, 
        EquippedArmamentsandItems,
        EquippedSpells
    );
} Character[10] <optimize=false, size=0x280010, read=Str("%03d | %s", this.Player.Level, this.Player.CharacterName)>;

struct USER_DATA10{
    byte Checksum[0x10] <hidden = true>;
    uint32 Version;
    uint64 SteamId;
    CSSettings Settings;
    CSMenuSystemSaveLoad MenuSystemSaveLoad;
    CSProfileSummary ProfileSummary;
    uint32 GameDataMan0xd0;
    byte GameDataMan0x75;
    CSPCOptionData PCOptionData;
    CSKeyConfigSaveLoad KeyConfigSaveLoad;
    uint64 GameDataMan0x118;
} Common <size=0x60010>;

struct USER_DATA11{
    byte checksum[0x10] <hidden = true>;
    byte unk[0x10] <hidden = true>;
    byte Regulation[0x1e9fb0];
} Regulation<size=0x24001F>;


// =========================================
// PlayerGameData Hash Helper Functions
// =========================================

// Calculate Hash for a 4 byte value
uint ValueHash(uint value) {
    local byte buffer[0x4];
    ConvertDataToBytes(value, buffer);
    return BytesHash(buffer, 0x4);
}

// Calculate Hash for a sized byte stream value
uint BytesHash(byte bytes[], int size) {
    local int i = 0; // Start
    local int n = size; // End
    
    local uint lo = 1;
    local uint hi = 0;
    
    while (i < n) {
        lo = lo + (bytes[i] & 0xFF);
        hi = hi + lo;
        i = i + 1;
    }
    
    local uint lo_hashed = ComputeHashedValue(lo);
    local uint hi_hashed = ComputeHashedValue(hi);
    
    return (lo_hashed | (hi_hashed << 0x10)) * 2;    
}

// Compute the Hash
uint ComputeHashedValue(uint input) {
    local uint64 product = (uint64)0x80078071 * (uint64)input;
    local uint32 upper_bits = (uint32)(product >> 32);
    local uint32 shifted_upper_bits = upper_bits >> 15;
    local uint32 mod_product = (uint32)((int32)shifted_upper_bits * (-0xfff1));
    return input + mod_product;
}

// Calculate Stats Hash
uint StatsHash(PlayerGameData &player) {
    local int size = 0x24;
    
    local uint stats[9];
    stats[0] = player.Vigor;
    stats[1] = player.Mind;
    stats[2] = player.Endurance;
    stats[3] = player.Strength;
    stats[4] = player.Dexterity;
    stats[6] = player.Faith;
    stats[5] = player.Intelligence;
    stats[7] = player.Arcane;
    stats[8] = player.Humanity;
    
    local byte buffer[size];
    ConvertDataToBytes(stats, buffer);
    return BytesHash(buffer, size);
}

// Calculate Equipped Weapons Hash
uint EquippedWeaponsHash(ChrAsmEquipment& equipment) {
    local int size = 0x28;
    
    local uint ids[10];
    ids[0] = equipment.LeftHandArmament1;
    ids[1] = equipment.LeftHandArmament2;
    ids[2] = equipment.LeftHandArmament3;
    ids[3] = equipment.RightHandArmament1;
    ids[4] = equipment.RightHandArmament2;
    ids[5] = equipment.RightHandArmament3;
    ids[6] = equipment.Arrows1;
    ids[7] = equipment.Arrows2;
    ids[8] = equipment.Bolts1;
    ids[9] = equipment.Bolts2;
    
    local byte buffer[size];
    ConvertDataToBytes(ids, buffer);
    return BytesHash(buffer, size);
}

// Calculate Equipped Armor and Talismans Hash
uint EquippedArmorsAndTalismansHash(ChrAsmEquipment& equipment) {
    local int size = 0x24;
    local uint ids[9];
    ids[0] = equipment.Head;
    ids[1] = equipment.Chest;
    ids[2] = equipment.Arms;
    ids[3] = equipment.Legs;
    ids[4] = equipment.Talisman1;
    ids[5] = equipment.Talisman2;
    ids[6] = equipment.Talisman3;
    ids[7] = equipment.Talisman4;
    ids[8] = equipment.Talisman5;
    
    local byte buffer[size];
    ConvertDataToBytes(ids, buffer);
    return BytesHash(buffer, size);
}

// Calculate Equipped QuickItems and PouchItems Hash
uint EquippedItemsHash(EquippedArmamentsAndItems& equippedArmamentsAndItems) {
    local int size = 0x40;
    local uint ids[16];
    ids[0] = equippedArmamentsAndItems.QuickItem1; 
    ids[1] = equippedArmamentsAndItems.QuickItem2; 
    ids[2] = equippedArmamentsAndItems.QuickItem3; 
    ids[3] = equippedArmamentsAndItems.QuickItem4; 
    ids[4] = equippedArmamentsAndItems.QuickItem5; 
    ids[5] = equippedArmamentsAndItems.QuickItem6; 
    ids[6] = equippedArmamentsAndItems.QuickItem7; 
    ids[7] = equippedArmamentsAndItems.QuickItem8; 
    ids[8] = equippedArmamentsAndItems.QuickItem9; 
    ids[9] = equippedArmamentsAndItems.QuickItem10; 
    ids[10] = equippedArmamentsAndItems.Pouch1; 
    ids[11] = equippedArmamentsAndItems.Pouch2; 
    ids[12] = equippedArmamentsAndItems.Pouch3; 
    ids[13] = equippedArmamentsAndItems.Pouch4; 
    ids[14] = equippedArmamentsAndItems.Pouch5; 
    ids[15] = equippedArmamentsAndItems.Pouch6;
    
    local int i = 0;
    while ( i < 16 ) {
        if (ids[i] != 0xFFFFFFFF) {
            ids[i] = ids[i] & 0x0fffffff;    
        }
        i = i +1;    
    }
    
    local byte buffer[size];
    ConvertDataToBytes(ids, buffer);
    return BytesHash(buffer, size);
}

// Calculate Equipped Spells Hash
uint EquippedSpellsHash(EquipMagicData& equippedSpells) {
    local int size = 0x38;
    local uint ids[14];
    
    local int i = 0;
    while ( i < 14 ) {
        ids[i] = equippedSpells.SpellSlots[i].SpellID;    
        i = i +1;    
    }
    
    local byte buffer[size];
    ConvertDataToBytes(ids, buffer);
    return BytesHash(buffer, size);
}


//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SL2
//   Authors: ClayAmore
//   Version: 
//   Purpose: Reading an Elden Ring Save File
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Items 
// Global CS::GaItem starts at (143ce0680 + 0x8)
// Length 0x1400
// Used for lookup of item ids from ga_item_handle maybe
// Ashes of War are first
typedef struct Item {
    int32 ga_item_handle<format=hex>;
    int32 ItemID<format=hex>;
    // Additional data for type = Weapon
    if ( (ItemID != 0) && ((ItemID & 0xf0000000) == 0)) { 
        int32 unk; 
        int32 unk2;
        int32 ash_of_war_ga_item_handle<format=hex>;
        byte unk4;
    }
    // Additional data for type = Armor
    else if((ItemID != 0) && ((ItemID & 0xf0000000) == 0x10000000)) { 
        int32 unk;
        int32 unk2;
    }
};

// Player Game Data
// CS::PlayerGameData+0x8 (7FF49FC3A6D0+0x8)
// Length 0x1B0
typedef struct {
    uint32 unk;
    uint32 unk1;
    uint32 Health;
    uint32 MaxHealth;
    uint32 BaseMaxHealth;
    uint32 FP;
    uint32 MaxFP;
    uint32 BaseMaxFP;
    uint32 unk2;
    uint32 SP;
    uint32 MaxSP;
    uint32 BaseMaxSP;
    uint32 unk3;
    uint32 Vigor;
    uint32 Mind;
    uint32 Endurance;
    uint32 Strength;
    uint32 Dexterity;
    uint32 Intelligence;
    uint32 Faith;
    uint32 Arcane;
    uint32 unk4[0x3];
    uint32 Level;
    uint32 Souls;
    uint32 Soulmemory;
    byte unk5[0x28];
    wchar_t  CharacterName[0x10];
    byte unk6[0x2];
    byte Gender;
    byte ArcheType;
    byte unk7[0x3];
    byte Gift;
    byte unk8[0x54];
    wchar_t Password[0x9];
    wchar_t GroupPassword1[0x9];
    wchar_t GroupPassword2[0x9];
    wchar_t GroupPassword3[0x9];
    wchar_t GroupPassword4[0x9];
    wchar_t GroupPassword5[0x9];
} PlayerGameData <size=0x1B0>;

// Player Game Data
// CS::PlayerGameData+0x1B8 (7FF49FC3A6D0+0x1B8)
// Length 0xD0
typedef struct {
    uint32 speffect_id;
    uint32 unk;
    uint32 unk;
    uint32 unk;
} SPEffects;


// Equip Game Data
// CS::EquipGameData+0x8 (7FF49FC3A980+0x8)
// Length 0x58
typedef struct {
    int32 LeftHandArmament1;
    int32 RightHandArmament1;
    int32 LeftHandArmament2;
    int32 RightHandArmament2;
    int32 LeftHandArmament3;
    int32 RightHandArmament3;
    int32 Arrows1;
    int32 Bolts1;
    int32 Arrows2;
    int32 Bolts2;
    int32 unk1;
    int32 unk2;
    int32 Head;
    int32 Chest;
    int32 Arms;
    int32 Legs;
    int32 unk3;
    int32 Talisman1;
    int32 Talisman2;
    int32 Talisman3;
    int32 Talisman4;
} MenuEquippedItems <size=0x58>;


// Chr Asm
// CS::ChrAsm+0x8 (7FF49FC3A9F0+0x8)
// Length 0x74
typedef struct {
    uint32 ArmStyle;
    uint32 LeftHandWeaponActiveSlot;
    uint32 RightHandWeaponActiveSlot;
    uint32 LeftArrowActiveSlot;
    uint32 RightArrowActiveSlot;
    uint32 LeftBoltActiveSlot;
    uint32 RightBoltActiveSlot;
    int32 LeftHandArmament1;
    int32 RightHandArmament1;
    int32 LeftHandArmament2;
    int32 RightHandArmament2;
    int32 LeftHandArmament3;
    int32 RightHandArmament3;
    int32 Arrows1;
    int32 Bolts1;
    int32 Arrows2;
    int32 Bolts2;
    int32 unk1;
    int32 unk2;
    int32 Head;
    int32 Chest;
    int32 Arms;
    int32 Legs;
    int32 unk3;
    int32 Talisman1;
    int32 Talisman2;
    int32 Talisman3;
    int32 Talisman4;
} ChrAsm <size=0x74>;


// Chr Asm
// CS::ChrAsm+0x24 (7FF49FC3A9F0+0x24)
// Length 0x58
typedef struct {
    uint32 LeftHandArmament1 <format=hex>;
    uint32 RightHandArmament1 <format=hex>;
    uint32 LeftHandArmament2 <format=hex>;
    uint32 RightHandArmament2 <format=hex>;
    uint32 LeftHandArmament3 <format=hex>;
    uint32 RightHandArmament3 <format=hex>;
    uint32 Arrows1 <format=hex>;
    uint32 Arrows2 <format=hex>;
    uint32 Bolts1 <format=hex>;
    uint32 Bolts2 <format=hex>;
    uint32 unk <format=hex>;
    uint32 unk1 <format=hex>;
    uint32 Head <format=hex>;
    uint32 Chest <format=hex>;
    uint32 Arms <format=hex>;
    uint32 Legs <format=hex>;
    uint32 unk2 <format=hex>;
    uint32 Talisman1 <format=hex>;
    uint32 Talisman2 <format=hex>;
    uint32 Talisman3 <format=hex>;
    uint32 Talisman4 <format=hex>;
    uint32 unk3 <format=hex>;
} ChrAsm2 <size=0x58>;


// Equip Inventory Data
// Shows up twice from different instances
// CS::EquipInventoryData+0x8 (7FF49FC3AAD8+0x8,7FF49E380330+0x8)
// Length 
typedef struct {
    uint32 gaitem_handle <format=hex>;
    uint32 quantity;
    uint32 inventory_index;
} EquipInventoryDataEntry;

typedef struct (int size, int size2) {
    int32 distinct_common_items_count;
    EquipInventoryDataEntry common_items[size];
    uint32 distinct_key_items_count;
    EquipInventoryDataEntry key_items[size2];
    uint32 latest_equipment_index; // Used for identfyin equipped items.
    uint32 acquistion_sort_id;
} EquipInventoryData ;


// Equip Magic Data
// CS::EquipMagicData+10 (7FF49E2BE4C0+0x10)
typedef struct {
    int32 spell_id;
    int32 offset;
} EquippedSpell;
typedef struct {
    EquippedSpell equipped_spells[0xC]; // Max is 12. Moon Of Nokstella Talisman adds two additional spots 
    byte unk[0x10];
    int32 current_slot;
} EquipMagicData ;


// Equip Item Data
// CS::EquipItemData+8 (7FF49FC3ABF0+0x8)
typedef struct {
    uint32 item_gaitem_handle <format=hex>;
    int32 equpiment_index;
} EquippedItem;
typedef struct {
    EquippedItem equipped_items[0xA];
    uint32 current_slot;
    EquippedItem pouch_items[0x6];
    byte unk[0x8];
} EquipItemData ;


// Gesture Equip Data
// CS::GestureEquipData+8 (7FF4A029D040+0x8)
// Length 0x70
typedef struct {
    uint32 equipped_gesture[0x6];
} GestureEquipData ;


// Projectile Equip Data
// No class name (7FF49F546020)
// Length max_projectiles*0x8
typedef struct {
    int32 projectile_id; // Can be found in the EquipParamWeapon.
    int32 unk2;
} Projectile;
typedef struct {
    uint32 distinct_projectile_count; // Maybe?
    Projectile projectiles[distinct_projectile_count]; 
} EquipProjectileData ;

// Another Equip Data list?
// No class name (7FF49F546888)
// Length 0x27
typedef struct {
    int32 LeftHandArmament1 <format=hex>;
    int32 RightHandArmament1 <format=hex>;
    int32 LeftHandArmament2 <format=hex>;
    int32 RightHandArmament2 <format=hex>;
    int32 LeftHandArmament3 <format=hex>;
    int32 RightHandArmament3 <format=hex>;
    int32 Arrows1 <format=hex>;
    int32 Bolts1 <format=hex>;
    int32 Arrows2 <format=hex>;
    int32 Bolts2 <format=hex>;
    int32 unk1 <format=hex>;
    int32 unk2 <format=hex>;
    int32 Head <format=hex>;
    int32 Chest <format=hex>;
    int32 Arms <format=hex>;
    int32 Legs <format=hex>;
    int32 unk3 <format=hex>;
    int32 Talisman1 <format=hex>;
    int32 Talisman2 <format=hex>;
    int32 Talisman3 <format=hex>;
    int32 Talisman4 <format=hex>;
    int32 unk3 <format=hex>; 
    int32 QuickItem1 <format=hex>;
    int32 QuickItem2 <format=hex>;
    int32 QuickItem3 <format=hex>;
    int32 QuickItem4 <format=hex>;
    int32 QuickItem5 <format=hex>;
    int32 QuickItem6 <format=hex>;
    int32 QuickItem7 <format=hex>;
    int32 QuickItem8 <format=hex>;
    int32 QuickItem9 <format=hex>;
    int32 QuickItem10 <format=hex>;
    int32 Pouch1 <format=hex>;
    int32 Pouch2 <format=hex>;
    int32 Pouch3 <format=hex>;
    int32 Pouch4 <format=hex>;
    int32 Pouch5 <format=hex>;
    int32 Pouch6 <format=hex>;
} AnotherEquippedItems <size=(0x27*0x4)>;

// Equipped Physic
// No class name (7FF49FC3AD44)
// Length 0xC
typedef struct {
    int32 slot1;
    int32 slot2;
} PhysicEquipData <size=0xC>;

// Face Data
// CS::FaceData (7FF49FC3AE10)
// Length 0x12F
//typedef struct {
//    int32 face_data_0x150;
//    byte face_data_0x8[0x120];
//   byte face_data_0x128_not_eq_0x0; 
//    int16 face_data_0x128;
//    int64 face_data_0x130;
//} FaceData <size=0x12F>;
typedef struct {
    uint64 unk01;
    uint64 unk02;
    uint32 face_model;
    uint32 hair_model;
    uint32 eye_model;
    uint32 eyebrow_model;
    uint32 beard_model;
    uint32 accessory_model;
    uint32 decal_model;
    uint32 eyelash_model;
    uchar apparent_age;
    uchar facial_aesthetic;
    uchar form_emphasis;
    uchar numen;
    uchar brow_ridge_height;
    uchar inner_brow_height;
    uchar outer_brow_ridge;
    uchar cheekbone_height;
    uchar cheekbone_depth;
    uchar cheekbone_width;
    uchar cheekbone_protrusion;
    uchar cheeks_morph;
    uchar chin_tip_position;
    uchar chin_length;
    uchar chin_protrusion;
    uchar chin_depth;
    uchar chin_size;
    uchar chin_height;
    uchar chin_width;
    uchar eye_position;
    uchar eye_size;
    uchar eye_slant;
    uchar eye_spacing;
    uchar nose_size;
    uchar nose_to_forehead_ratio;
    uchar unimplemented_1;
    uchar face_protrusion;
    uchar vert_face_ratio;
    uchar facial_feature_slant;
    uchar horizontal_face_ratio;
    uchar unimplemented_2;
    uchar forehead_depth;
    uchar forehead_protrusion;
    uchar unimplemented_3;
    uchar jaw_protrusion;
    uchar jaw_width;
    uchar lower_jaw;
    uchar jaw_contour;
    uchar lip_shape;
    uchar lip_size;
    uchar lip_fullness;
    uchar mouth_expression;
    uchar lip_protrusion;
    uchar lip_thickness;
    uchar mouth_protrusion;
    uchar mouth_slant;
    uchar mouth_occlusion;
    uchar mouth_position;
    uchar mouth_width;
    uchar mouth_to_chin_distance;
    uchar nose_ridge_depth;
    uchar nose_ridge_length;
    uchar nose_position;
    uchar nose_tip_height;
    uchar nostril_slant;
    uchar nostril_size;
    uchar nostril_width;
    uchar nose_protrusion;
    uchar nose_bridge_height;
    uchar nose_bridge_protrusion_1;
    uchar nose_bridge_protrusion_2;
    uchar nose_bridge_with;
    uchar nose_height;
    uchar nose_slant;
    uchar unimplemented_4[64];
    uchar body_scale_head;
    uchar body_scale_breast;
    uchar body_scale_abdomen;
    uchar body_scale_arm_right;
    uchar body_scale_leg_right;
    uchar body_scale_arm_left;
    uchar body_scale_leg_left;
    uchar skin_color_r;
    uchar skin_color_g;
    uchar skin_color_b;
    uchar skin_color_a;
    uchar skin_pores;
    uchar beard_stubble;
    uchar skin_dark_circle;
    uchar skin_dark_circle_color_r;
    uchar skin_dark_circle_color_g;
    uchar skin_dark_circle_color_b;
    uchar cheeks;
    uchar cheeks_color_r;
    uchar cheeks_color_g;
    uchar cheeks_color_b;
    uchar eyeliner;
    uchar eyeliner_color_r;
    uchar eyeliner_color_g;
    uchar eyeliner_color_b;
    uchar eyeshadow_lower;
    uchar eyeshadow_lower_color_r;
    uchar eyeshadow_lower_color_g;
    uchar eyeshadow_lower_color_b;
    uchar eyeshadow_upper;
    uchar eyeshadow_upper_color_r;
    uchar eyeshadow_upper_color_g;
    uchar eyeshadow_upper_color_b;
    uchar lipstick;
    uchar lipstick_color_r;
    uchar lipstick_color_g;
    uchar lipstick_color_b;
    uchar decal_position_x;
    uchar decal_position_y;
    uchar decal_angle;
    uchar decal_scale;
    uchar decal_color_r;
    uchar decal_color_g;
    uchar decal_color_b;
    uchar unimplemented_5;
    uchar decal_flip;
    uchar body_hair;
    uchar body_hair_color_r;
    uchar body_hair_color_g;
    uchar body_hair_color_b;
    uchar eye_right_color_r;
    uchar eye_right_color_g;
    uchar eye_right_color_b;
    uchar eye_right_iris_size;
    uchar eye_right_clouding;
    uchar eye_right_clouding_r;
    uchar eye_right_clouding_g;
    uchar eye_right_clouding_b;
    uchar eye_right_sclera_r;
    uchar eye_right_sclera_g;
    uchar eye_right_sclera_b;
    uchar eye_right_position;
    uchar eye_left_color_r;
    uchar eye_left_color_g;
    uchar eye_left_color_b;
    uchar eye_left_iris_size;
    uchar eye_left_clouding;
    uchar eye_left_clouding_r;
    uchar eye_left_clouding_g;
    uchar eye_left_clouding_b;
    uchar eye_left_sclera_r;
    uchar eye_left_sclera_g;
    uchar eye_left_sclera_b;
    uchar eye_left_position;
    uchar hair_color_r;
    uchar hair_color_g;
    uchar hair_color_b;
    uchar hair_color_a;
    uchar hair_color_root_darkness;
    uchar hair_color_white;
    uchar beard_color_r;
    uchar beard_color_g;
    uchar beard_color_b;
    uchar beard_color_a;
    uchar beard_color_root_darkness;
    uchar beard_color_white;
    uchar eyebrow_color_r;
    uchar eyebrow_color_g;
    uchar eyebrow_color_b;
    uchar eyebrow_color_a;
    uchar eyebrow_color_root_darkness;
    uchar eyebrow_color_white;
    uchar eyelash_color_r;
    uchar eyelash_color_g;
    uchar eyelash_color_b;
    uchar accessories_color_r;
    uchar accessories_color_g;
    uchar accessories_color_b;
    uchar frenzied_flame;
    uchar unimplemented_6;
    uchar unimplemented_7;
    uchar unimplemented_8;
    uchar unimplemented_9;
    uchar unimplemented_10;
    uchar unimplemented_11;
    uchar unimplemented_12;
    uchar end_data[21];
} FaceData <size=0x12F>;
    

// Gesture Game Data
// CS::GestureGameData (7FF49E380440)
// Length 0x100
typedef struct {
    int32 GestureID[0x40]; // Not sure if it's gesture id
} GestureGameData <size=0x100>;

// Regions
// No class name (7FF49FC3AFE8)
// Length: Length defined in the struct
typedef struct {
    uint32 unlocked_regions_count;
    uint32 region_ids[unlocked_regions_count];
} UnlockedRegions;

// Ride Game Data
// CS::RideGameData (7FF4A05AC380)
// Length 0x28
typedef struct {
    float horse_coordinates_xyz[0x3];
    int32 unk;
    byte unk1[0x10];
    int32 horse_hp;
    int32 unk;
} RideGameData <size=0x28>;

// Menu Profile Save Load
// CS::MenuProfileSaveLoad (7FF4A0086E80)
// Length 0x1008
typedef struct {
    uint32 unk;
    uint32 size;
    byte unk1[size];
} MenuProfileSaveLoad <size=0x1008>;


// Trophy Equip Data
// CS::TrophyEquipData (7FF4A05AC340)
// Length 0x34
typedef struct {
    int32 unk;
    byte unk1[0x10];
    byte unk2[0x10];
    byte unk3[0x10];
} TrophyEquipData <size=0x34>;


// Gaitem Game Data
// CS::GaitemGameData (7FF4A0089940)
// Length ((0x1B58*0x10)+0x8)
typedef struct  {
    uint32 id <format=hex>;
    uint32 unk <format=hex>;
    uint32 equpiment_index_or_reinforce_type_id;
    uint32 unk;
} GaitemGameDataEntry <size=0x10>;
typedef struct {
    int32 distinct_aquired_items_count;
    int32 unk;
    GaitemGameDataEntry item[0x1B58];
} GaitemGameData <size=((0x1B58*0x10)+0x8)>;

// Tutorial Data
// CS::CSTutorialData (7FF4A029D070)
// Length 0x408
typedef struct {
    uint32 unk;
    uint32 size;
    byte unk1[size];
} TutorialData;


// EventFlag
// CS::CSFDVirtualMemoryFlag (7FF4A0300000)
// Length 0x1BF99F
typedef struct {
    byte a: 1;
    byte b: 1;
    byte c: 1;
    byte d: 1;
    byte e: 1;
    byte f: 1;
    byte g: 1;
    byte h: 1;
} EventFlagsBit;
typedef struct {
    EventFlagsBit event_flag[0x1BF99F]; // Array length is calculated from (CSEventFlagMan+0x20*CSEventFlagMan+0x24)
} EventFlags <size=(0x1BF99F)>;

// UknownStructWithDefinedLength
// no class name (WorldChrManImp)
// Length: 
typedef struct {
    int32 length;
    byte data[length];
} UknownStructWithDefinedLength;

// PlayerCoords
// CS::GameMan+0xbd0 (7FF49FC37520+0xbd0)
// Length 0x3D
typedef struct {
    float global_coords[0x3];
    uint32 map_id; // (index_id, region_id, block_id, area_id)
    byte game_man_0xBE0[0x10] <format=hex>;
    byte game_man_0xBF0;
    float unk_coords_game_man_0xB04[0x3];
    byte game_man_0xB10[0x10];
} PlayerCoords<size=0x3D>;

// CSNetMan
// CS::CSNetMan ()
// Length 0x20004
typedef struct {
    uint32 csnet_man_unk_always_2;
    byte something_to_do_with_csnet_data_chunk[0x20000];
} CSNetMan<size=0x20004>;

// WorldAreaWeather
// CS::WorldAreaWeather 
// Length 0xC
typedef struct {
    uint32 unk;
    uint32 unk;
    uint32 unk;
} WorldAreaWeather<size=0xC>;

// WorldAreaTime
// CS::WorldAreaTime
// Length 0xC
typedef struct {
    uint32 unk;
    uint32 unk;
    uint32 unk;
} WorldAreaTime<size=0xC>;

// CSMenuSystemSaveLoad
// CS::CSMenuSystemSaveLoad (7FF4A00859D0)
// Length 0x3D
typedef struct {
    uint32 unk;
    uint32 size;
    byte data[size]; 
} CSMenuSystemSaveLoad;

// CSProfileSummary
// CS::CSProfileSummary (7FF4A0087EE0)
// Length ??
typedef struct {
    wchar_t chracter_name[0x11];
    int32 level;
    int32 _0x28;
    int32 _0x2C;
    int32 _0x30;
    int32 _0x34;
    int32 _0x38_0x150;
    byte _0x38_0x8[0x120];
    byte _0x1A8[0xE8];
    byte _0x290;
    byte _0x291;
    byte _0x292;
    byte _0x293;
    byte _0x294;
    byte _0x295;
    int32 _0x298;
} CSProfileSummary;

// PCOptionsData
// CS::PCOptionsData (7FF49E1830C0)
// Length ??
typedef struct {
    uint16 _0x8[0x9];
    byte _0x1a[0xa0];
} PCOptionsData;

// CSKeyConfigSaveLoad
// CS::CSKeyConfigSaveLoad (7FF49E1830C0)
// Length ??
typedef struct {
    uint32 unk;
    uint32 size;
    byte data[size];
} CSKeyConfigSaveLoad;

struct FileHeader {
    char magic[0x4];
    byte unk[0x5];
    byte big_endian;
    byte unk;
    byte unk;
    uint file_count;
} file_header <size=0x300>;

// Character Slot
struct Slot {
    byte checksum[0x10];
    uint32 unk01;
    uint32 MapID <format=hex>;
    byte unk[0x18];
    Item gaitem_handle_to_item_id_map[0x1400] <optimize=false>;
    PlayerGameData player_game_data <bgcolor=0xf1c40f>;
    SPEffects speffects[0xd] <bgcolor=0xd35400>;
    MenuEquippedItems menu_equipped_items <bgcolor=0x000020>;
    ChrAsm chr_asm <bgcolor=0xc0392b>;
    ChrAsm2 chr_asm_2 <bgcolor=0xecf0f1>;
    EquipInventoryData inventory_held(0xA80, 0x180);
    EquipMagicData equip_magic_data;
    EquipItemData equip_item_data;
    GestureEquipData gesture_equip_data;
    EquipProjectileData equip_projectile_data;
    AnotherEquippedItems another_equipped_items_list;
    PhysicEquipData physic_equip_data;
    FaceData face_data;
    EquipInventoryData inventory_storage_box(0x780, 0x80);
    GestureGameData gesture_game_data;
    UnlockedRegions unlocked_regions;
    RideGameData ride_game_data;
    byte unk;
    byte unk1[0x40] <format=hex>;
    uint32 unk2 <format=hex>;
    uint32 unk3;
    uint32 unk4;
    MenuProfileSaveLoad menu_profile_save_load;
    TrophyEquipData trophy_equip_data;
    GaitemGameData ga_item_game_data;
    TutorialData tutorial_data;
    byte unk5;
    byte unk6;
    byte unk7;
    uint32 unk8;
    uint32 unk9;
    byte unk10;
    uint32 unk11;
    uint32 unk12;
    byte unk13;
    uint32 unk14;
    uint32 unk15;
    EventFlags event_flags;
    byte unk;
    UknownStructWithDefinedLength uknown_struct_something_to_do_with_field_area; 
    UknownStructWithDefinedLength unkown_struct_something_to_do_with_world_chr_man;
    UknownStructWithDefinedLength unkown_struct_something_to_do_with_world_geom;
    UknownStructWithDefinedLength unkown_struct_something_to_do_with_world_geom2;
    UknownStructWithDefinedLength unkown_struct_something_to_do_with_field_area2;
    PlayerCoords player_coords;
    byte game_man_0xb2d;
    byte game_man_0xb2e;
    uint32 game_man_0xb30;
    uint32 game_man_0xb34;
    uint32 game_man_0xb38;
    byte game_man_0xc83;
    CSNetMan csnet_man;
    WorldAreaWeather world_area_weather;
    WorldAreaTime world_area_time;
    byte unk_143cd4d88_0xE0[0x10];
    uint64 steam_id;
    byte cs_ps5_activity[0x20];
    byte cs_dlc[0x32];
    byte unk_bytes_added_at_0x140670d7b[0x80];
} save_slots[10] <optimize=false, size=0x280010>;

struct USER_DATA10{
    byte checksum[0x10];
    uint32 unk;
    uint64 steam_id;
    byte unk2[0x140];
    CSMenuSystemSaveLoad cs_menu_system_save_load;
    byte active_slot[0xA];
    CSProfileSummary profile_summary[0xA];
    uint32 _0xd0;
    byte unk;
    PCOptionsData pc_option_data;
    CSKeyConfigSaveLoad cs_key_config_save_load;
    uint64 _0x118;
} user_data_10 <size=0x60010>;

struct USER_DATA11{
    byte checksum[0x10];
    byte unk[0x10];
    byte regulation[0x1C5F70];
} user_data_11<size=0x24001F>;
